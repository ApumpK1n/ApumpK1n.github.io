<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++匿名命名空间</title>
      <link href="/2023/05/31/c-anonymousfunction/"/>
      <url>/2023/05/31/c-anonymousfunction/</url>
      
        <content type="html"><![CDATA[<blockquote></blockquote><p>当定义一个命名空间时，可以忽略这个命名空间的名称：</p><p>namespce {<br>    char c;<br>}<br>编译器在内部会为这个命名空间生成一个唯一的名字，而且还会为这个匿名的命名空间生成一条using指令。所以上面的代码在效果上等同于：<br>namespace __UNIQUE_NAME_ {<br>    char c;<br>}<br>using namespace __UNIQUE_NAME_;</p><p>在匿名命名空间中声明的名称也将被编译器转换，与编译器为这个匿名命名空间生成的唯一内部名称(即这里的__UNIQUE_NAME_)绑定在一起。</p><p>这些名称具有internal链接属性，这和声明为static的全局名称的链接属性是相同的，即名称的作用域被限制在当前文件中，无法通过在另外的文件中使用extern声明来进行链接。</p><p>如果不提倡使用全局static声明一个名称拥有internal链接属性，则匿名命名空间可以作为一种更好的达到相同效果的方法。</p><p>注意:命名空间都是具有external 连接属性的,只是匿名的命名空间产生的<strong>UNIQUE_NAME</strong>在别的文件中无法得到,这个唯一的名字是不可见的.</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PhysX学习（一）源码编译</title>
      <link href="/2023/05/26/physx1/"/>
      <url>/2023/05/26/physx1/</url>
      
        <content type="html"><![CDATA[<blockquote></blockquote><p><a href="https://developer.nvidia.com/zh-cn/physx-sdk" target="_blank" rel="noopener">NVIDIA PhysX SDK</a></p><p><a href="https://gameworksdocs.nvidia.com/simulation.html#physx" target="_blank" rel="noopener">NVIDIA GameWorks</a></p><p><a href="https://gameworksdocs.nvidia.com/PhysX/4.1/documentation/physxguide/Index.html" target="_blank" rel="noopener">NVIDIA PhysX 4.1 Document</a></p><h2 id="下载PhysX源码"><a href="#下载PhysX源码" class="headerlink" title="下载PhysX源码"></a>下载PhysX源码</h2><p><a href="https://github.com/NVIDIAGameWorks/PhysX" target="_blank" rel="noopener">https://github.com/NVIDIAGameWorks/PhysX</a></p><p>参考这个pdf做环境配置 <a href="https://pages.cpsc.ucalgary.ca/~mmactavi/585/PhysXSetup.pdf" target="_blank" rel="noopener">Setup.pdf</a></p><h2 id="安装DirectX-SDK"><a href="#安装DirectX-SDK" class="headerlink" title="安装DirectX SDK"></a>安装DirectX SDK</h2><p>SDK只在源码中的示例中被使用，下载 <a href="https://www.microsoft.com/en-ca/download/details.aspx?id=6812" target="_blank" rel="noopener">DirectX SDK 9.29.1962 June 2010</a><br>后安装一路点击即可</p><p>安装过程出现Error Code:s1023 错误, 解决办法是卸载已有的Microsoft Visual C++ 2010 x86 Redistributable - 1010.0.40219 即可，包括 x64 和 x86。</p><h2 id="生成编译工程"><a href="#生成编译工程" class="headerlink" title="生成编译工程"></a>生成编译工程</h2><!--  --><p><img src="./images/generate_projects.jpg" alt></p><!--  --><p><img src="./images/command.jpg" alt><br>生成结果：</p><!--  --><p><img src="./images/sln.jpg" alt></p><p>如果生成不了编译工程，则可能是VS2017 未安装或者配置组件不对，确定一下几点：</p><!--  --><p><img src="./images/component.jpg" alt></p><h2 id="编译工程"><a href="#编译工程" class="headerlink" title="编译工程"></a>编译工程</h2><p>打开PhysXSDK.sln, 点击 生成/生成解决方案，无报错后工程生成在bin文件夹下</p><h2 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h2><p>在 physx\bin\win.x86_64.vc141.mt\debug 目录下会生成很多 .exe 文件，这些都是官方提供的示例，可以直接双击运行。例如：Samples_64.exe:</p><p><img src="./images/sample.jpg" alt></p><!--  -->]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HelloWord!</title>
      <link href="/2022/06/21/helloworld/"/>
      <url>/2022/06/21/helloworld/</url>
      
        <content type="html"><![CDATA[<blockquote></blockquote><p>HelloWorld!</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
